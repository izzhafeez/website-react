{
  "modules": {
    "cs3230": {
      "code": "CS3230",
      "title": "Design and Analysis of Algorithms",
      "date": "AY22/23 S1",
      "grade": "A",
      "description": [
        [
          "Taught by: Arnab Bhattacharyya, Prashant Nalini Vasudevan"
        ],
        [
          "This module is well-known to be one of the toughest core modules for NUS CS students. Pretty much no coding is involved; the entire module is full of proofs and pseudocode. We need to prove why a certain algorithm works, and modify algorithms to solve the problem at hand."
        ],
        [
          "The first half of the module goes through different methods of analysing an algorithm, from asymptotic to probabilistic. It also goes through different levels of hashing (universal, uniform etc..), all of which was tested for the midterms."
        ],
        [
          "The second half of the module introduces us to new styles of algorithms, starting with Dynamic to Greedy to Incremental and finally Linear Algorithms. The emphasis for these lectures was to transform well-known algorithms to suit our needs. The last few lectures goes through reducibility and NP-completeness (basically testing whether a problem is considered computationally hard)."
        ]
      ],
      "tips": [
        [
          "One of the biggest problems with this module is the lack of feedback for our solutions. The feedback for our assignments come very late, and pretty much half the feedback was returned to us after our finals. Your tutor is your best bet for getting guidance."
        ]
      ]
    },
    "cs2102": {
      "code": "CS2102",
      "title": "Database Systems",
      "date": "AY22/23 S1",
      "grade": "A",
      "description": [
        [
          "Taught by: Christian Von Der Weth, Adi Yoga Sidi Prabawa , St√©phane Bressan"
        ],
        [
          "The first half of the module teaches about SQL queries and schema, including the ER diagram. It goes from regular select statements, to CTEs, subqueries and views. The midterms was partly a practical test for SQL statements, and partly algebraic manipulation (which is very confusing)."
        ],
        [
          "The second half of the module deals with designing our databases, to support basic statements like deletions, insertions and updates. It introduces us to triggers and functions, which act as automatic processes when someone interacts with the database. But the most important part of the module is normalisation, which breaks tables down into smaller ones that makes maintenance much easier."
        ]
      ],
      "tips": [
        [
          "Get good groupmates for the project section. And also, be sure to practice normalisation as much as possible, to remove any careless mistakes along the way."
        ]
      ]
    },
    "ma2101": {
      "code": "MA2101",
      "title": "Linear Algebra II",
      "date": "AY22/23 S1",
      "grade": "A",
      "description": [
        [
          "Taught by: Zhang De Qi"
        ],
        [
          "There was a way-too-long revision period for the topics of MA2001, but after that, the difficulty ramped up significantly. The first new thing we were taught was quotient spaces and isomorphism. Then, we moved onto Linear Transformations and Transition Matrices. All were quite manageable in terms of the content we were required to understand. However, the last 3 topics were undoubtedly the most difficult. They were Chapter 9: Eigenvalues, Chapter 10: Jordan Canonical Form, and Chapter 11: Inner Products"
        ],
        [
          "If I were to describe them, I would say the topics are very abstract, with alot of simple yet powerful theorems strewn all over the place. Notation is also all over the place, and can get very confusing all the time."
        ]
      ],
      "tips": [
        [
          "Proofs take center stage in this module, as basically anything can become a proving question. It would be wise to understand the patterns in proving, instead of simply memorising every proof for every theorem."
        ],
        [
          "The other important tip is to prepare your cheatsheet early. There are WAY too many theorems that you have to understand and apply, so please please please try your best to condense them into readable cheatsheets."
        ]
      ]
    },
    "cs2100": {
      "code": "CS2100",
      "title": "Computer Organisation",
      "date": "AY22/23 S1",
      "grade": "A-",
      "description": [
        [
          "Taught by: Colin (REC), Aaron (WEBLEC)"
        ],
        [
          "Out of the CS holy trinity, this module is well-known to have the most content. It starts off with the high levels of abstraction with the C programming language. It taught us basic memory management, and the functionalities of pointers. The lectures then moved onto teaching the MIPS Assembly language, and how to decode/encode it into binary form."
        ],
        [
          "The second half of the module dealt with boolean algebra, and worked our way into building more complex circuit components. But the most difficult part comes in the final 2 lectures, where we were taught pipelining (time taken to run code), and caching."
        ]
      ],
      "tips": [
        [
          "Too many topics, and not enough time to revise for all of them. Prepare for the tutorials, as they can help you rectify your understanding of the topics."
        ]
      ]
    },
    "ma2108": {
      "code": "MA2108",
      "title": "Mathematical Analysis I",
      "date": "AY22/23 S1",
      "grade": "B+",
      "description": [
        [
          "Taught by: An XinLiang"
        ],
        [
          "This module is basically proving stupidly obvious things, and coming up with overly complicated solutions to simple problems. Like proving there is a positive solution for x^2 = 3 (easily a one page solution involving supremums)."
        ],
        [
          "At first, the theorems are quite difficult to understand and apply, but they slowly get more intuitive as the same proofs are used in different contexts. It becomes quite elegant eventually."
        ],
        [
          "I got rekt by the bell curve, getting my first ever non-A for math in my life. But yeah, kind of expected, seeing as though the midterms and finals were both brutally easy and careless-prone."
        ]
      ],
      "tips": [
        [
          "The key to this module is making sure every step you take is valid and does not make any assumptions. Everything you do must follow either an axiom or theorem, and not just take O-level knowledge for granted."
        ],
        [
          "Other than that, just do lots of practice papers and mark them to know where you went wrong."
        ]
      ]
    },
    "more": {
      "code": "Various",
      "title": "More Modules",
      "date": "Various",
      "link": "../blog/modules",
      "grade": "",
      "ignore": true
    },
    "cs2030s": {
      "code": "CS2030S",
      "title": "Programming Methodology II",
      "date": "AY21/22 S2",
      "grade": "A+",
      "description": [
        [
          "Taught by: Boyd Anderson"
        ],
        [
          "This module teaches programming practices, and core concepts in object-oriented programming, asynchronous programming and functional programming. These topics were not very interconnected, so you could focus on certain topics and be relatively fine (as compared to other mods). But do note that some questions may be absolutely painful in the Midterms and Finals, so putting all your eggs in one basket may not work out."
        ],
        [
          "That semester, the infamous practical examination was handled very poorly, as students had to wait over 2 hours for the test to start, only to be struck with an unfair time limit and grading system. I got lucky for this practical, as I managed to complete everything within the time limit."
        ],
        [
          "But otherwise, though the professor stumbled a bit with his words, the concepts were quite easy to understand, and I managed to get my A+ (despite scoring below average for Midterms)."
        ]
      ],
      "tips": [
        [
          "The labs were brutal, and the marker will fault you over the smallest mistakes. So even if your code runs perfectly for all the test cases, your solution may not be perfect. So for labs, make sure you handle null cases properly, as they often use this as a trick to catch us."
        ],
        [
          "If you're like me and you're struggling with diagrams (like the Stack Heap diagram), then rewrite the instructions in your own terms. Do also cross check against your tutor so that there are no conceptual errors."
        ]
      ]
    },
    "cs2040s": {
      "code": "CS2040S",
      "title": "Data Structures and Algorithms",
      "date": "AY21/22 S2",
      "grade": "A",
      "description": [
        [
          "Taught by: Seth Gilbert"
        ],
        [
          "This module introduces us to the world of algorithms and problem-solving, and is super useful for coding interviews. From arrays, to trees, to graphs and more, this module has definitely helped me develop my projects. Among the data structures taught in the module, I found the AVL Tree, Priority Queue and the KD Tree to be the most useful to me, having used them to develop my ",
          ["link", "../works/projects/geospatial-management", "Geospatial Management Tool"],
          ". I even implemented my own Bounds Tree, which was heavily inspired by the KD Tree."
        ],
        [
          "In terms of tutorials, my tutor was super nice and encourages everyone to participate. I went for a couple of one-on-one consults to clarify some concepts. I also asked him for advice on how to proceed with my Geospatial Mangement Tool, and he was willing to help. Such a nice tutor!"
        ]
      ],
      "tips": [
        [
          "Many of the optional practices were way too time-consuming to be worth the tiny amount of EXP on Coursemology. One notable one would be the implementation of the AVL Tree in Java. So unless you want to pursue Java all the way, it's just not worth it. It might've been better if they gave us the implementation, and ask us to improve upon it; much less pain and much more rewarding."
        ],
        [
          "Overall, this module is all about problem-solving, so the best way to do well is to expose yourself to a healthy assortment of programming problems. More importantly, examine the solutions to those problems and convince yourself why they work. Leetcode it if you want, but I think tutorials and consults are good enough."
        ],
        [
          "If you want to be extra spicy, then you can code up your own personal projects like what I did. In that way, you can practice concepts from both CS2030S and CS2040S, so it's quite effective."
        ]
      ]
    },
    "st2334": {
      "code": "ST2334",
      "title": "Probability and Statistics",
      "date": "AY21/22 S2",
      "grade": "A+",
      "description": [
        [
          "The first half of this module is basically revision for topics taught in JC; it focusses on the fundamentals of probability and basic combinatorics. However, at the middle of the module, the difficulty ramps up quite drastically. They were manageable topics, but can get lost if you don't follow the lecture; it goes into the various hypothesis tests and integration techniques."
        ],
        [
          "However, the most frightening thing about this module was the format of the final exam. It prevented backtracking, so we couldn't return to a previous question once past it. This led to absurd time management tactics, leaving me with 30 minutes to solve the last 2 questions (out of 35)."
        ]
      ],
      "tips": [
        [
          "If coding scripts are available for future exams, then be sure to abuse them as much as possible. For my finals, I prepared my Python script to answer basically any question they throw at me, so all I needed to do was use the right one for the job."
        ],
        [
          "Otherwise, figure out which topics are new to you, and you can safely skip the lectures for the rest of them."
        ]
      ]
    },
    "is1103": {
      "code": "IS1103",
      "title": "Ethics in Computing",
      "date": "AY21/22 S2",
      "grade": "A+",
      "description": [
        [
          "Absolute waste of time. Take if you want to pull your hair out for no reason whatsoever. Everyone ages 20 years when taking this module."
        ],
        [
          "That aside, the content is common sense, but the questions are designed to make you question your sanity every week. Be prepared to examine all interpretations of every question, only to get the question wrong in the end."
        ],
        [
          "And I absolutely learned nothing from this, as I, until now, still don't know WTF a negative and positive right is."
        ],
        [
          "Don't take this if you don't need to."
        ]
      ],
      "tips": [
        [
          "Just SU bro... It's not worth the mental torture."
        ]
      ]
    },
    "gea1000": {
      "code": "GEA1000",
      "title": "Quantitative Reasoning with Data",
      "date": "AY21/22 S2",
      "grade": "A",
      "description": [
        [
          "Made the mistake of taking this module over the more useful ST1131. But while this module doesn't progress far in terms of technical knowledge, it does make it manageable for non-STEM students. The lessons on Excel and visualization software (Radiant) I guess were important for people who haven't any experience in them. But since many of us are already familiar with Excel, it merely serves as a refresher course."
        ],
        [
          "The project can be done within a weekend, so naturally, that's when all the work happens."
        ]
      ],
      "tips": [
        [
          "Be good at CTRL-F for the notes that they give. But if it's in-person for future finals, then just try to remember the nitty-gritty of the important concepts. There's not much content anyway."
        ]
      ]
    },
    "gec1030": {
      "code": "GEC1030",
      "title": "Metropolis: A City in World History",
      "date": "AY21/22 S2",
      "grade": "A-",
      "description": [
        [
          "This module teaches about the evolution of cities throughout history. Coupled with loads of case studies like Istanbul, Manchester and Edo, the module details the common trends for why cities succeed, be it as a city of power, commerce, transformation etc.."
        ],
        [
          "The module basically had no lectures, so that's a massive plus. So no need to do => don't do."
        ]
      ],
      "tips": [
        [
          "Ugh I suck at essays..."
        ]
      ]
    },
    "cs1231s": {
      "code": "CS1231S",
      "title": "Discrete Structures",
      "date": "AY21/22 S1",
      "grade": "A+",
      "description": [
        [
          "Taught by: Aaron"
        ],
        [
          "This module is math-intensive and usually is the first hurdle for CS students in the world of math. Like most other students, I found the middle sections to be the hardest, covering topics like Equivalence Relations and the deadly Cardinality."
        ],
        [
          "That aside, this module exposes students to quite a lot of topics in discrete math, so it serves as a good foundation for future topics in such fields. In addition, the proving techniques learnt here are super useful in many other later modules, like CS2040S which is usually taken the semester after."
        ]
      ],
      "tips": [
        [
          "Proofs are the most painful part of this module and the first taste of university-level mathematical rigour. As such, it is very important to read the solutions to the proving questions, and identify patterns to help you remember. Especially for the middle topics, as those are the killer topics for this module. Get your arsenal of proofs ready in your cheatsheet, and you should be fine for most proving questions. Really helped me a lot."
        ]
      ]
    },
    "cs1101s": {
      "code": "CS1101S",
      "title": "Programming Methodology I",
      "date": "AY21/22 S1",
      "grade": "A",
      "description": [
        [
          "Taught by: Martin Henz"
        ],
        [
          "This module used the Source Academy platform, a derivative of JavaScript that focusses on teaching programming concepts, rather than the language itself. I quite enjoyed the module, due to the highly gamified nature of this platform. I also participated in most of the optional competitions and did most of the optional practices as well."
        ]
      ],
      "tips": [
        [
          "Be prepared to spend a lot of time on this module. But unless you‚Äôre aiming for bonus points in CS1010R, there‚Äôs no need to complete EVERY optional task. Some of them are really difficult, and you may take a lot of time to even get something working. But when you do get it working, it is quite satisfying."
        ]
      ]
    },
    "ma1521": {
      "code": "MA1521",
      "title": "Calculus for Computing",
      "date": "AY21/22 S1",
      "grade": "A",
      "description": [
        [
          "Taught by: Chan Heng Huat"
        ],
        [
          "This module is mainly a refresher course for calculus so naturally, the bell curve is highly skewed, and any loss of marks could just send you back a grade. I think this module was a little poorly executed, because of the lack of anti-cheat measures. But it really feels like the professor cares about his students, so he really did try his best."
        ],
        [
          "For my semester at least, there were only 3 graded tests. And no finals or midterms. As such, it was a very light module, and minimal studying is needed (due to the heavy overlap with JC topics). The main issue was that the lectures took place at the awful 6-8pm timeslot on both Wednesdays and Fridays, so eventually everyone ended up not attending them anyway."
        ]
      ],
      "tips": [
        [
          "This module does introduce some new concepts in multi variate calculus and convergence tests. Figure out which weeks those fall on, and make sure you do not miss them. They are new topics not covered in JC or whatever."
        ]
      ]
    },
    "ma2001": {
      "code": "MA2001",
      "title": "Linear Algebra I",
      "date": "AY21/22 S1",
      "grade": "A-",
      "description": [
        [
          "Taught by: Vincent Tan"
        ],
        [
          "This module teaches about linear spaces and matrices and is a good foundational module for AI modules in CS."
        ],
        [
          "For me, the greatest setback I faced was the constant construction happening around me throughout the semester; it was especially bad during the final exam as the lift was being renovated on my level throughout that week."
        ]
      ],
      "tips": [
        [
          "The concepts in this module accumulate over time, and if you get lost at one point, then you‚Äôll likely be lost for the rest. Can‚Äôt anyhow skip lectures and try to backtrack. But as long as you can keep up, should be all good to go. A flowchart of concepts works very well here, and do maintain key identities such as that for rank and invertible matrices."
        ]
      ]
    },
    "gess1019": {
      "code": "GESS1019",
      "title": "Urban Planning in Singapore",
      "date": "AY21/22 S1",
      "grade": "A-",
      "description": [
        [
          "This module teaches about Singapore‚Äôs urban history and the policy process for urban development. While I found the middle topics of policy frameworks and development plans to be quite dry, I did appreciate the efforts of the professor to make them interesting."
        ]
      ],
      "tips": [
        [
          "There was not much studying to be done for the finals, as it was open book. In addition, a lot of the examples I gave were from general knowledge anyway, just shoehorning whatever I can think of to bolster my arguments in the essay questions. Otherwise, just keep a list of master plans and concept plans handy, and should be fine."
        ]
      ]
    },
    "cp2106": {
      "code": "CP2106",
      "title": "Independent Computing Project (Orbital)",
      "date": "Y1 Sem Break",
      "grade": "Artemis",
      "noNotes": true,
      "description": [
        [
          "Over the course of my first year semester break, my partner and I created a note-sharing platform that combined the features of Reddit and GitHub. We used the MongoDB-Express-Vue-Node (MEVN) tech stack to build it, which might've been a bad choice. Main reason being, we didn't manage to get a mentor for a project, unlike most other Artemis groups. But nonetheless, we managed to resolve our own issues and retain our highest level of achievement."
        ]
      ],
      "tips": [
        [
          "We didn't get a mentor for our project, which had led to several hiccups when initialising and deploying our project. But we ultimately found it unnecessary as we could eventually solve those issues. So even without a mentor, it is not the end of the world."
        ]
      ]
    }
  }
}