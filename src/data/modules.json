{
  "modules": {
    "cs2030s": {
      "code": "CS2030S",
      "title": "Programming Methodology II",
      "date": "AY21/22 S2",
      "grade": "A+",
      "description": [
        [
          "This module teaches programming practices, and core concepts in object-oriented programming, asynchronous programming and functional programming. That semester, the infamous practical examination was handled very poorly, as students had to wait over 2 hours for the test to start, only to be struck with an unfair time limit and grading system. I got lucky for this practical, as I managed to complete everything within the time limit. But otherwise, though the professor stumbled a bit with his words, the concepts were quite easy to understand."
        ]
      ],
      "tips": [
        [
          "The labs were brutal, and the marker will fault you over the smallest mistakes. So even if your code runs perfectly for all the test cases, your solution may not be perfect. So for labs, make sure you handle null cases properly, as they often use this as a trick to catch us."
        ],
        [
          "If you're like me and you're struggling with diagrams (like the Stack Heap diagram), then rewrite the instructions in your own terms. You can also cross check against your tutor so that there are no conceptual errors."
        ]
      ]
    },
    "cs1231s": {
      "code": "CS1231S",
      "title": "Discrete Structures",
      "date": "AY21/22 S1",
      "grade": "A+",
      "description": [
        [
          "This module is math-intensive and usually is the first hurdle for CS students in the world of math. I found the middle sections to be the hardest, covering topics like Equivalence Relations and the deadly Cardinality."
        ]
      ],
      "tips": [
        [
          "Proofs are the most painful part of this module and the first taste of university-level mathematical rigour. As such, it is very important to read the solutions to the proving questions, and identify patterns to help you remember. Especially for the middle topics, as those are the killer topics for this module. Get your arsenal of proofs ready in your cheatsheet, and you should be fine for most proving questions. Really helped me a lot."
        ]
      ]
    },
    "st2334": {
      "code": "ST2334",
      "title": "Probability and Statistics",
      "date": "AY21/22 S2",
      "grade": "A+",
      "description": [
        [
          "The first half of this module is basically revision for topics taught in JC; it focusses on the fundamentals of probability and basic combinatorics. However, at the middle of the module, the difficulty ramps up quite drastically. Manageable topics, but can get lost if you don't follow the lecture; it goes into the various hypothesis tests and integration techniques."
        ],
        [
          "However, the most frightening thing about this module was the format of the final exam. It prevented backtracking, so we couldn't return to a previous question once past it. This led to absurd time management tactics, leaving me with 30 minutes to solve the last 2 questions (out of 35)."
        ]
      ],
      "tips": [
        [
          "If coding scripts are available for future exams, then be sure to abuse them as much as possible. For my finals, I prepared my Python script to answer basically any question they throw at me, so all I needed to do was use the right one for the job."
        ],
        [
          "Otherwise, figure out which topics are new to you, and you can safely skip the lectures for the rest of them."
        ]
      ]
    },
    "is1103": {
      "code": "IS1103",
      "title": "Ethics in Computing",
      "date": "AY21/22 S2",
      "grade": "A+",
      "description": [
        [
          "Absolute waste of time. Take if you want to pull your hair out for no reason whatsoever. Everyone ages 20 years when taking this module."
        ],
        [
          "That aside, the content is common sense, but the questions are designed to make you question your sanity every week. Be prepared to examine all interpretations of every question, only to get the question wrong in the end."
        ]
      ],
      "tips": [
        [
          "Just SU bro... It's not worth the mental torture."
        ]
      ]
    },
    "cs2040s": {
      "code": "CS2040S",
      "title": "Data Structures and Algorithms",
      "date": "AY21/22 S2",
      "grade": "A",
      "description": [
        [
          "This module introduces us to the world of algorithms and problem-solving, and is super useful for coding interviews. From arrays, to trees, to graphs and more, this module has definitely helped me develop my projects. Among the data structures taught in the module, I found the AVL Tree, Priority Queue and the KD Tree to be the most useful to me, having used them to develop my ",
          ["link", "../works/projects/geospatial-management", "Geospatial Management Tool"],
          ". I even implemented my own Bounds Tree, which was heavily inspired by the KD Tree."
        ]
      ],
      "tips": [
        [
          "Many of the optional practices were way too time-consuming to be worth the tiny amount of EXP on Coursemology. One notable one would be the implementation of the AVL Tree in Java. So unless you want to pursue Java all the way, it's just not worth it. It might've been better if they gave us the implementation, and ask us to improve upon it; much less pain and much more rewarding."
        ],
        [
          "Overall, this module is all about problem-solving, so the best way to do well is to expose yourself to a healthy assortment of programming problems. More importantly, examine the solutions to those problems and convince yourself why they work. Leetcode it if you want, but I think tutorials and consults are good enough."
        ]
      ]
    },
    "more": {
      "code": "Various",
      "title": "More Modules",
      "date": "Various",
      "link": "../blog/modules",
      "grade": "",
      "ignore": true
    },
    "cs1101s": {
      "code": "CS1101S",
      "title": "Programming Methodology I",
      "date": "AY21/22 S1",
      "grade": "A",
      "description": [
        [
          "This module used the Source Academy platform, a derivative of JavaScript that focusses on teaching programming concepts, rather than the language itself. I quite enjoyed the module, due to the highly gamified nature of this platform. I also participated in most of the optional competitions and did most of the optional practices as well."
        ]
      ],
      "tips": [
        [
          "Be prepared to spend a lot of time on this module. But unless you’re aiming for bonus points in CS1010R, there’s no need to complete EVERY optional task. Some of them are really difficult, and you may take a lot of time to even get something working. But when you do get it working, it is quite satisfying."
        ]
      ]
    },
    "ma1521": {
      "code": "MA1521",
      "title": "Calculus for Computing",
      "date": "AY21/22 S1",
      "grade": "A",
      "description": [
        [
          "This module is mainly a refresher course for calculus so naturally, the bell curve is highly skewed, and any loss of marks could just send you back a grade. I think this module was a little poorly executed, because of the lack of anti-cheat measures. But it really feels like the professor cares about his students, so he really did try his best."
        ]
      ],
      "tips": [
        [
          "This module does introduce some new concepts in multi variate calculus and convergence tests. Figure out which weeks those fall on, and make sure you do not miss them. They are new topics not covered in JC or whatever."
        ]
      ]
    },
    "gea1000": {
      "code": "GEA1000",
      "title": "Quantitative Reasoning with Data",
      "date": "AY21/22 S2",
      "grade": "A",
      "description": [
        [
          "Made the mistake of taking this module over the more useful ST1131. But while this module doesn't progress far in terms of technical knowledge, it does make it manageable for non-STEM students. The lessons on Excel and visualization software (Radiant) I guess were important for people who haven't any experience in them. But since many of us are already familiar with Excel, it merely serves as a refresher course."
        ],
        [
          "The project can be done within a weekend, so naturally, that's when all the work happens."
        ]
      ],
      "tips": [
        [
          "Be good at CTRL-F for the notes that they give. But if it's in person for future semesters, then oops."
        ]
      ]
    },
    "ma2001": {
      "code": "MA2001",
      "title": "Linear Algebra I",
      "date": "AY21/22 S1",
      "grade": "A-",
      "description": [
        [
          "This module teaches about linear spaces and matrices and is a good foundational module for AI modules in CS. For me, the greatest setback I faced was the constant construction happening around me throughout the semester; it was especially bad during the final exam as the lift was being renovated on my level throughout that week."
        ]
      ],
      "tips": [
        [
          "The concepts in this module are cumulative, and if you get lost at one point, then you’ll likely be lost for the rest. Can’t anyhow skip lectures and try to backtrack.  But as long as you can keep up, should be all good to go. A flowchart of concepts works very well here, and do maintain key identities such as that for rank and invertible matrices."
        ]
      ]
    },
    "gess1019": {
      "code": "GESS1019",
      "title": "Urban Planning in Singapore",
      "date": "AY21/22 S1",
      "grade": "A-",
      "description": [
        [
          "This module teaches about Singapore’s urban history and the policy process for urban development. While I found the middle topics of policy frameworks and development plans to be quite dry, I did appreciate the efforts of the professor to make them interesting."
        ]
      ],
      "tips": [
        [
          "There was not much studying to be done for the finals, as it was open book. In addition, a lot of the examples I gave were from general knowledge anyway, just shoehorning whatever I can think of to bolster my arguments in the essay questions. Otherwise, just keep a list of master plans and concept plans handy, and should be fine."
        ]
      ]
    },
    "gec1030": {
      "code": "GEC1030",
      "title": "Metropolis: A City in World History",
      "date": "AY21/22 S2",
      "grade": "A-",
      "description": [
        [
          "This module teaches about the evolution of cities throughout history. Coupled with loads of case studies like Istanbul, Manchester and Edo, the module details the common trends for why cities succeed, be it as a city of power, commerce, transformation etc.."
        ],
        [
          "The module basically had no lectures, so that's a massive plus. So no need to do => don't do."
        ]
      ],
      "tips": [
        [
          "Ugh I suck at essays..."
        ]
      ]
    }
  }
}